#!/usr/bin/env bash
set -e

#
# Helpers
##################################################

red="\e[31m"
reset="\e[39m"

run() {
  task=${1}
  shift
  echo -e [${task}] ${@}
  ${@}
}

fail() {
  echo -e ${red}${@}${reset}
  exit 1
}

env-subst() {
  file=${1}
  name=${2}
  required=${3}

  if [ -z ${!name} ] && [ ! -z ${required} ]; then
    fail "Environment variable $name must be set."
  fi

  run build-config sed "s|\$${name}|${!name}|g" -i ${file}
}

#
# Commands
##################################################

linkdir=node_modules/verdaccio-github-oauth-ui
config=verdaccio.yaml

#
# Copy the template and replace environment variables.
#
build-config() {
  run build-config cp verdaccio.template.yaml $config

  env-subst $config GITHUB_OAUTH_CLIENT_ID "required"
  env-subst $config GITHUB_OAUTH_CLIENT_SECRET "required"
  env-subst $config GITHUB_OAUTH_GITHUB_ENTERPRISE_HOSTNAME
  env-subst $config GITHUB_OAUTH_ORG "required"
}

#
# Copy client sources to dist.
#
build-client() {
  run build-client tsc -p src/client/tsconfig.json ${@}
  run build-client cp -R src/client/*.css dist/client
}

#
# Compile server to dist.
#
build-server() {
  run build-server tsc -p src/server/tsconfig.json ${@}
}

#
# Build server, config and client.
#
build() {
  build-config &
  build-client &
  build-server &
  wait
}

#
# Remove the plugin from node_modules.
#
unlink() {
  run unlink rm -rf $linkdir
}


#
# Copy client to node_modules.
#
link-client() {
  run link-client mkdir -p $linkdir/dist/client
  run link-client cp -R dist/client $linkdir/dist
}

#
# Copy server to node_modules.
#
link-server() {
  run link-server mkdir -p $linkdir/dist/server
  run link-server cp -R dist/server $linkdir/dist
  run link-server cp package.json $linkdir
  run link-server cp verdaccio.yaml $linkdir
}

#
# Link client and server.
#
link() {
  unlink
  link-client &
  link-server &
  wait
}

#
# Build and link client.
#
update-client() {
  build-client
  link-client
}

#
# Build and link server.
#
update-server() {
  build-config
  build-server
  link-server
}

#
# Update client and server.
#
update() {
  unlink
  update-client &
  update-server &
  wait
}

#
# Start verdaccio.
#
start() {
  run start yarn verdaccio -c $config ${@}
}

#
# Build and link server.
#
update-start-server() {
  update-server
  start
}

#
# Watch for client changes, rebuild and relink.
#
watch-client() {
  run watch-client \
    yarn nodemon --watch src/client --ext ts,css --exec bash run update-client
}

#
# Watch for server changes, rebuild and relink.
#
watch-server() {
  run watch-server \
    yarn nodemon --watch src/server --ext ts --exec bash run update-server
}

#
# Watch client and server.
#
watch() {
  unlink
  watch-client &
  watch-server
}

#
# Run linters.
#
lint() {
  run lint yarn tslint -c tslint.json -p src/client/tsconfig.json ${@} &
  run lint yarn tslint -c tslint.json -p src/server/tsconfig.json ${@} &
  wait
}

#
# Testing notice.
#
test() {
  echo 'INFO: Please fire up verdaccio and test changes manually.'
  echo 'INFO: Try ./run update && ./run start'
}

#
# CLI
##################################################

#
# Call the function specified by the first parameter, passing all remaining
# parameters to the function. If no such function exists, display usage info.
#
if [ -n "$1" ] && type $1 | grep -i function > /dev/null; then
  command="$1"
  shift
  $command ${@}
else
  fail "No such command: $1"
fi
